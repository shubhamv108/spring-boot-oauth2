version: "3.3"

services:
  app:
    container_name: spring-boot-oauth
    hostname: spring-boot-oauth
    image: spring-boot-oauth
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: Dockerfile
      args:
        END: 'TEST'
    volumes:
      - "/tmp:/tmp"

    ports:
      - '8080:8080'

    restart: 'on-failure'

    depends_on:
      - fluentbit
      - mysql
      - kafka
      - elasticsearch
      - prometheus

    logging:
      driver: fluentd
      options:
        fluentd-address: fluentbit:24224
        fluentd-async-connect: "true"
        tag: 'containerssh.{{.ID}}'

    environment:
      - SLEEP_LENGTH=5
      - spring.datasource.url=jdbc:mysql://mysql:3306/sse?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&autoReconnect=true&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      - spring.datasource.username=test
      - spring.datasource.password=root1234
      - spring.kafka.bootstrap-servers=kafka:9092
      - spring.security.oauth2.client.registration.google#client-id=
      - spring.security.oauth2.client.registration.google#client-secret=

  sonar:
    image: sonarqube:7.9.5-community
    depends_on:
      - sonar-db
      - init
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar-db:5432/sonar
      SONAR_JDBC_USERNAME: sonartest
      SONAR_JDBC_PASSWORD: sonartest
      sonar.web.port: 9000
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    ulimits:
      nproc: 131072
      nofile:
        soft: 8192
        hard: 131072
    ports:
      - "9017:9000"
  init:
    image: bash
    privileged: true
    user: root
    volumes:
      - ./sonarqube/init.sh:/mnt/init.sh <---- replace the path
    command: [ "sh", "-e", "/mnt/init.sh" ]

  sonar-db:
    image: postgres:12
    environment:
      POSTGRES_USER: sonartest
      POSTGRES_PASSWORD: sonartest
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  fluentbit:
    image: 'shubham01/sse-fluentbit:latest'
    hostname: fluentbit
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluentbit/parsers.conf:/fluent-bit/etc/parsers.conf
      - ./log/:/etc/data

  mysql:
    image: 'mysql:latest'
    environment:
      - 'MYSQL_DATABASE=sse'
      - 'MYSQL_PASSWORD=root1234'
      - 'MYSQL_ROOT_PASSWORD=root1234'
      - 'MYSQL_USER=test'
    ports:
      - '3306:3306'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"

  elasticsearch:
    image: elasticsearch:8.9.1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana-server
    restart: always
    depends_on:
      - prometheus
      - influxdb
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    links:
      - influxdb
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
      - elasticsearch
    links:
      - influxdb
    ports:
      - '8125:8125'

  influxdb:
    image: influxdb:1.8-alpine
    container_name: influxdb
    restart: always
    environment:
      - INFLUXDB_DB=influx
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    ports:
      - '8086:8086'
    volumes:
      - influxdb_data:/var/lib/influxdb

volumes:
  grafana_data: { }
  influxdb_data: { }
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  postgresql:
  postgresql_data:

networks:
  sse:
    external: true